== For the kaigi

* Make it handle faulty input. E.g. empty line, syntax error etc.
* Add color box around current input indicating wether or not the input is:
  * a valid ruby block (green)
  * valid syntax but not (yet) a block (orange)
  * syntax error (red)
* Add a few convenience methods to create a window/view to play around with.
* Add ‘try ruby’

== OLD TODOS

* File tickets on MR trac for all current dietrb spec failures
* Automatically resize input field as long as input is needed.
* DietRB fails when trying to complete methods on `nil'
* Don't select all text in the input field after giving it focus
* Colorize string in input field as you type
* Clicking a line in an exception BT should show the code in that file, somehow, probably a QuickLook-like panel with a web view with colorized source. Or if it's code entered in the console, show that.
* Make border of input field red as long as there's a syntax error. Possibly see if another color can be used to indicate the source ‘indent’ level.
* Think about selectable areas / copy support
* Would it be possible to ‘marshal’ all objects in the env, before evalling source? This way, if the user does something to crash the app, we can restore the env.
